cmake_minimum_required (VERSION 3.1)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
project (OHCS)
if(UNIX)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D UNIX")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14 -Wall -O3 -flto =lpthread")
elseif(WIN32)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D WIN32")
else()
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D Unknown")
endif()
if(CMAKE_CXX_COMPILER_ID EQUAL "GNU")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D GNU")
elseif(CMAKE_CXX_COMPILER_ID EQUAL "MSVC")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D MSVC")
endif()
OPTION (DEBUG "DEBUG MODE")
if(DEBUG)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D DEBUG -g")
endif()
OPTION (SEOHCS "SavetyEncrypt mode")
if(SEOHCS)
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D SEOHCS")
endif()
# The version number.
set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wall")
set (OHCS_VERSION_MAJOR 2)
set (OHCS_VERSION_MINOR 0)
set (OHCS_VERSION_BUILD 1)
include_directories (include)
ADD_SUBDIRECTORY (src)
find_package(OpenMP)
if (OPENMP_FOUND)
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
